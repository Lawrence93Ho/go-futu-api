package main

import (
	"flag"

	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	var flags flag.FlagSet
	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if f.Generate {
				for _, m := range f.Messages {
					if m.GoIdent.GoName == "Response" {
						generateFile(gen, f)
					}
				}
			}
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + "_futu.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P(`// Code generated by protoc-gen-go-futu. DO NOT EDIT.`)
	g.P()
	g.P(`package `, file.GoPackageName)
	g.P()
	g.P(`import (`)
	g.P(`"google.golang.org/protobuf/proto"`)
	g.P(`"errors"`)
	g.P(`)`)
	g.P()
	g.P(`
	type ResponseChan struct {
		ch chan *Response
	}
	
	func NewResponseChan() *ResponseChan {
		return &ResponseChan{
			ch: make(chan *Response),
		}
	}
	
	func (ch *ResponseChan) Send(b []byte) error {
		var resp Response
		if err := proto.Unmarshal(b, &resp); err != nil {
			return err
		}
		ch.ch <- &resp
		return nil
	}
	
	func (ch *ResponseChan) Close() {
		close(ch.ch)
	}
	
	func (ch *ResponseChan) Response() (*S2C, error) {
		resp := <-ch.ch
		if resp.GetRetType() != 0 {
			return nil, errors.New(resp.GetRetMsg())
		}
		return resp.S2C, nil
	}
	
	func (ch *ResponseChan) Channel() chan *Response {
		return ch.ch
	}
	`)
}
